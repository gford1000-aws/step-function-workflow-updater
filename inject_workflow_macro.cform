{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Macro for CloudFormation, that extracts workflow JSON from S3 and injects into a StateMachine resource",
    "Parameters" : {
        "MacroName" : {
            "Description" : "The name of this Macro, which must be unique for the AWS account",
            "Type" : "String",
            "Default" : "StepFunctionWorkflowInjector"
        },
        "WorkflowBucketName" : {
            "Description" : "The Bucketname in which workflow JSON will be retrieved by the Macro function",
            "Type" : "String"
        },
        "MacroLogTTL" : {
            "Default" : 7,
            "Description" : "The TTL in days for the logs generated by the Macro function",
            "Type" : "Number",
            "AllowedValues" : [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
        }
    },
    "Resources": {
        "StepFunctionWorkflowInjector": {
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import boto3",
                                "import json",
                                "from urlparse import urlparse",
                                "",
                                "def load_from_s3(s3key):",
                                "    \"\"\"",
                                "    Load the data at the specified S3 key",
                                "    \"\"\"",
                                "    key_details = urlparse(s3key) # Should be URL format",
                                { "Fn::Sub" : [ "    bucket_name = \"${Name}\"", { "Name" : { "Ref" : "WorkflowBucketName" } } ] },
                                "    if bucket_name != key_details[1]:",
                                "        raise Exception(\"Unexpected bucket specified! ({})\".format(key_details[1]))",
                                "    key = key_details[2][1:]",
                                "    print \"Bucket: {}\".format(bucket_name)",
                                "    print \"Key: {}\".format(key)",
                                "    ",
                                "    client = boto3.client('s3')",
                                "    return client.get_object(",
                                "        Bucket=bucket_name,",
                                "        Key=key)[\"Body\"].read()",
                                "",
                                "def replace_in_place(template, parameters):",
                                "    \"\"\"",
                                "    The parameters provide details of where to load the data to be",
                                "    injected into the template:",
                                "    ",
                                "    S3Key - the location of the data",
                                "    SMResource - the StateMachine resource to update",
                                "    \"\"\"",
                                "    ",
                                "    # First retrieve the JSON to inject as the workflow",
                                "    try:",
                                "        def_string = load_from_s3(parameters[\"S3Key\"])",
                                "    except Exception as e:",
                                "        raise Exception(\"Failed to load data from S3 - {}\".format(e))",
                                "    ",
                                "    # Now locate the specified resource",
                                "    state_machine = template[\"Resources\"].get(parameters[\"SMResource\"], None)",
                                "    if state_machine == None:",
                                "        raise Exception(\"SMResource {} not found in the template\".format(parameters[\"SMResource\"]))        ",
                                "    if state_machine[\"Type\"] != \"AWS::StepFunctions::StateMachine\":",
                                "        raise Exception(\"SMResource {} is of incorrect type {}\".format(parameters[\"SMResource\"], state_machine[\"Type\"]))",
                                "    state_machine[\"Properties\"][\"DefinitionString\"] = def_string",
                                "    return template",
                                "",
                                "def lambda_handler(event, context):",
                                "    \"\"\"",
                                "    Only return \"success\" status if the processing is successful",
                                "    \"\"\"",
                                "    try:",
                                "        return {",
                                "            \"requestId\" : event[\"requestId\"], ",
                                "            \"status\" : \"success\", ",
                                "            \"fragment\" : replace_in_place(event[\"fragment\"], event[\"templateParameterValues\"]) ",
                                "        }",
                                "    except Exception as e:",
                                "        print e ",
                                "        return {",
                                "            \"requestId\" : event[\"requestId\"], ",
                                "            \"status\" : \"failed\", ",
                                "            \"fragment\" : \"\" ",
                                "        }",
                                ""
                            ]
                        ]
                    }
                },
                "Description": "CloudFormation Macro: StateMachine workflow injector",
                "Handler": "index.lambda_handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "StepFunctionWorkflowInjectorRole",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": 60
            },
            "Type": "AWS::Lambda::Function"
        },
        "StepFunctionWorkflowInjectorVersion" : {
            "Type" : "AWS::Lambda::Version",
            "Properties" : {
                "FunctionName" : { "Ref" : "StepFunctionWorkflowInjector" },
                "Description" : "Initial Version of Injector"
            }
        },
        "StepFunctionWorkflowInjectorAlias" : {
            "Type" : "AWS::Lambda::Alias",
            "Properties" : {
                "FunctionName" : { "Ref" : "StepFunctionWorkflowInjector" },
                "FunctionVersion" : { "Fn::GetAtt" : [ "StepFunctionWorkflowInjectorVersion", "Version" ] },
                "Name" : "InjectorMacro"
            }
        },
        "StepFunctionWorkflowInjectorRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "LoggingLambdaActivity",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*",
                                    "Effect": "Allow"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "S3ReadonlyAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                  "Effect":"Allow",
                                  "Action":[ 
                                    "s3:Get*",
                                    "s3:List*"
                                  ],
                                  "Resource": [ 
                                    { "Fn::Sub" : [ "arn:aws:s3:::${Name}", { "Name" : { "Ref" : "WorkflowBucketName" } } ] },
                                    { "Fn::Sub" : [ "arn:aws:s3:::${Name}/*", { "Name" : { "Ref" : "WorkflowBucketName" } } ] },
                                  ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "StepFunctionWorkflowInjectorLogGroup" : {
            "Type" : "AWS::Logs::LogGroup",
            "Properties" : {
                "LogGroupName" : {
                    "Fn::Sub" : [ "/aws/lambda/${LambdaName}", { "LambdaName" : { "Ref" : "StepFunctionWorkflowInjector" } } ]
                },
                "RetentionInDays" : { "Ref" : "MacroLogTTL" }
            }
        },
        "Macro" : {
            "Type" : "AWS::CloudFormation::Macro",
            "Properties" : {
                "Description" : "Injects the latest workflow definition into the target StateMachine resource",
                "FunctionName" : { "Ref" : "StepFunctionWorkflowInjectorAlias" },
                "Name" : { "Ref" : "MacroName" }
            }
        }
    },
    "Outputs" : {
        "MacroName" : {
            "Description" : "The name of the Macro created by this script",
            "Value" : { "Ref" : "MacroName" }           
        }
    }
}
